openapi: 3.0.0
info:
  title: Ecomarce
  version: 1.0.0
  description: E-commerce Express Server is a robust and efficient solution designed to streamline and enhance the performance of online retail businesses. This specialized server serves as the backbone of e-commerce operations, ensuring seamless transactions, secure data handling, and optimal user experiences.
  contact:
    name: ABU TAHER
    url: https://github.com/taher267
    email: abutaher267@gmail.com
servers:
  - description: Dev
    url: "http://localhost:4001/api/v1"
tags:
  - name: Auth
    description: Authentication Endpoints (public)
  - name: Product
    description: Product Endpoints (public+private)
  - name: Review
    description: Review Endpoints (Private)
  - name: User
    description: User Endpoints (Private)
paths:
  "/auth/register":
    post:
      description: "Create a new account"
      tags:
        - "Auth"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Abu Taher
                email:
                  type: string
                  format: email
                  example: example@domain.com
                password:
                  type: string
                  format: password
                  example: password13r
              required:
                - "name"
                - "email"
                - "password"
      responses:
        "201":
          description: Signup successful
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Signup Successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"

  "/products":
    post:
      description: "Create a new Product"
      tags:
        - "Product"
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#components/schemas/Product"
      responses:
        "201":
          description: Signup Successful
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Added product, Successful
                  data:
                    type: object
                    properties:
                    $ref: "#components/schemas/Product"
    get:
      description: "Create a new Product"
      tags:
        - "Product"
      # requestBody:
      #   content:
      #     "application/json":
      #       schema:
      responses:
        "201":
          description: Signup Successful
          content:
            "application/json":
              schema:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: integer
                      format: int32
                      example: 201
                    message:
                      type: string
                      example: Added product, Successful
                    data:
                      type: object
                      properties:
                      $ref: "#components/schemas/Product"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Product:
      allOf:
        - type: object
          properties:
            title:
              type: string
              example: Smart T-Shirt
            description:
              type: string
              example: 'No sólo sobrevivió 500 años, sino que tambien ingresó como texto de relleno en documentos electrónicos, quedando esencialmente igual al original. Fue popularizado en los 60s con la creación de las hojas "Letraset", las cuales contenian pasajes de Lorem Ipsum, y más recientemente con software de autoedición, como por ejemplo Aldus PageMaker, el cual incluye versiones de Lorem Ipsum.'
            html:
              type: string
              example: <div><h1>Product title</h1><p>Product Details</p></div>
            sub_category_id:
              type: string
              description: subtitle of mongodb object id
              example: "6568c4210a26245b8cb27313"
            SKU:
              type: string
              description: Stock Keeping Unit
              example: "xyz-123"
            qty_in_stock:
              type: integer
              description: Quantity of stock
              format: int32
              example: 1
            thumb:
              type: string
              description: image url
              example: "http://example.com/image.png"
            price:
              type: integer
              description: Quantity of Stock
              format: int32
              example: 1
            images:
              type: array
              items:
                type: string
                description: image url
                example: "http://example.com/image.png"
          required: ["title", "sub_category_id", "SKU", "price"]
        - $ref: "#/components/schemas/Timestamp"

    Timestamp:
      type: object
      properties:
        createdAt:
          type: string
          format: data-time
          # example: "2023-09-20T00:25:31.597Z"
        updatedAt:
          type: string
          format: data-time
          # example: "2023-09-20T00:25:31.597Z"
